{"version":3,"sources":["component/Demo_24.js","component/DemoList_24.js","demos.js","component/SearchBox.js","container/App.js","serviceWorker.js","index.js"],"names":["Demo","props","className","src","process","id","alt","width","height","price","pname","storage","DemoList","demos","map","d","name","SearchBox","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAgBeA,G,WAdF,SAACC,GACZ,OACE,yBAAKC,UAAY,oDACf,yBAAKC,IAAKC,yBAAA,eAAiCH,EAAMI,GAAvC,QAAiDC,IAAI,OAAOC,MAAQ,MAAMC,OAAS,QAC7F,6BACE,4BAAKP,EAAMQ,OACX,2BAAIR,EAAMS,OACV,2BAAIT,EAAMU,aCSHC,EAfE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjB,OACE,6BAEIA,EAAMC,KAAK,SAAAC,GACP,OACE,kBAAC,EAAD,CAAMV,GAAIU,EAAEV,GAAIW,KAAMD,EAAEC,KAAMP,MAAOM,EAAEN,MAAOE,QAASI,EAAEJ,eCT1DE,G,WAAQ,CACnB,CACER,GAAI,IACJK,MAAO,sBACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,sBACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,mBACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,qBACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,mBACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,oBACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,mBACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,0CACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,IACJK,MAAO,eACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,kBACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,eACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,YACPC,QAAQ,cACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,0BACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,kBACPC,QAAQ,eACRF,MAAO,WAET,CACEJ,GAAI,KACJK,MAAO,iBACPC,QAAQ,cACRF,MAAO,aC9EIQ,EARG,WACd,OACI,yBAAKf,UAAU,OACX,2BAAOA,UAAU,uBAAuBgB,KAAK,SAASC,YAAY,oBCa/DC,MAVf,WACE,OACE,yBAAKlB,UAAU,MACb,wBAAIA,UAAU,SAAd,QACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUW,MAAOA,MCFHQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.704fdf50.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Demo = (props) => {\r\n  return (\r\n    <div className = 'dib br3 pa3 ma2 grow bw2 shadow-5 bg-black white'>\r\n      <img src={process.env.PUBLIC_URL + `/img/${props.id}.png`} alt=\"demo\" width = '200' height = '200' />\r\n      <div>\r\n        <h1>{props.price}</h1>\r\n        <p>{props.pname}</p>\r\n        <p>{props.storage}</p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n","import React from \"react\"\r\nimport Demo from \"./Demo_24\"\r\n\r\nconst DemoList = ({demos}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        demos.map((d => {\r\n            return (\r\n              <Demo id={d.id} name={d.name} price={d.price} storage={d.storage}/>\r\n            )\r\n          }\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoList;\r\n","export const demos = [\r\n  {\r\n    id: \"1\",\r\n    pname: \"Apple iPhone 12 Pro\",\r\n    storage:\"(6GB/512GB)\",\r\n    price: \"$44,400\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    pname: \"Samsung Galaxy S20+\",\r\n    storage:\"(12GB/128GB)\",\r\n    price: \"$25,400\",\r\n  },\r\n  {\r\n    id: \"3\",\r\n    pname: \"ASUS ROG Phone 3\",\r\n    storage:\"(12GB/512GB)\",\r\n    price: \"$26,800\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    pname: \"ASUS ZenFone 7 Pro\",\r\n    storage:\"(8GB/256GB)\",\r\n    price: \"$25,500\",\r\n  },\r\n  {\r\n    id: \"5\",\r\n    pname: \"SONY Xperia 1 II\",\r\n    storage:\"(8GB/256GB)\",\r\n    price: \"$33,990\",\r\n  },\r\n  {\r\n    id: \"6\",\r\n    pname: \"Google Pixel 4 XL\",\r\n    storage:\"(6GB/128GB)\",\r\n    price: \"$22,000\",\r\n  },\r\n  {\r\n    id: \"7\",\r\n    pname: \"OPPO Find X2 Pro\",\r\n    storage:\"(12GB/512GB)\",\r\n    price: \"$32,500\",\r\n  },\r\n  {\r\n    id: \"8\",\r\n    pname: \"黑鯊 遊戲手機 3\",\r\n    storage:\"(8GB/128GB)\",\r\n    price: \"$17,900\",\r\n  },\r\n  {\r\n    id: \"9\",\r\n    pname: \"LG V60 ThinQ\",\r\n    storage:\"(8GB/256GB)\",\r\n    price: \"$33,900\",\r\n  },\r\n  {\r\n    id: \"10\",\r\n    pname: \"SHARP AQUOS R5G\",\r\n    storage:\"(12GB/256GB)\",\r\n    price: \"$25,900\",\r\n  },\r\n  {\r\n    id: \"11\",\r\n    pname: \"Nokia 8.3 5G\",\r\n    storage:\"(8GB/128GB)\",\r\n    price: \"$16,500\",\r\n  },\r\n  {\r\n    id: \"12\",\r\n    pname: \"realme X3\",\r\n    storage:\"(8GB/128GB)\",\r\n    price: \"$10,000\",\r\n  },\r\n  {\r\n    id: \"13\",\r\n    pname: \"Samsung Galaxy Note 10+\",\r\n    storage:\"(12GB/256GB)\",\r\n    price: \"$24,800\",\r\n  },\r\n  {\r\n    id: \"14\",\r\n    pname: \"OPPO Reno 4 Pro\",\r\n    storage:\"(12GB/256GB)\",\r\n    price: \"$18,500\",\r\n  },\r\n  {\r\n    id: \"15\",\r\n    pname: \"ASUS ZenFone 6\",\r\n    storage:\"(8GB/512GB)\",\r\n    price: \"$17,750\",\r\n  },\r\n];\r\n","import React from 'react'\r\nimport './myCss.css'\r\n\r\nconst SearchBox = () => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa2 sw20 ba bg-black' type='search' placeholder='search phones'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from \"react\"\nimport \"./App.css\"\nimport DemoList from \"../component/DemoList_24\"\nimport 'tachyons'\nimport '../component/myCss.css'\nimport {demos} from \"../demos\"\nimport '../component/myCss.css'\nimport SearchBox from '../component/SearchBox.js'\n\nfunction App() {\n  return (\n    <div className='tc'>\n      <h1 className='white'>Demo</h1>\n      <SearchBox/>\n      <DemoList demos={demos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}